<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ethan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bit2tib.com/"/>
  <updated>2018-01-25T01:13:27.992Z</updated>
  <id>http://bit2tib.com/</id>
  
  <author>
    <name>Ethan X</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Update Hexo Theme</title>
    <link href="http://bit2tib.com/2018/01/24/update-hexo-theme/"/>
    <id>http://bit2tib.com/2018/01/24/update-hexo-theme/</id>
    <published>2018-01-24T07:26:59.000Z</published>
    <updated>2018-01-25T01:13:27.992Z</updated>
    
    <content type="html"><![CDATA[<p>热门的Hexo主题一般更新很快，我们可以定期将自己感兴趣的或者影响较大的patch合入到自己的主题仓库中，具体步骤如下：</p><h3 id="Sync-a-fork"><a href="#Sync-a-fork" class="headerlink" title="Sync a fork"></a>Sync a fork</h3><p>按照<a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="noopener">GitHub帮助文档</a>，将自己的<a href="https://github.com/triplekiller/hexo-theme-indigo.git" target="_blank" rel="noopener">Hexo主题仓库</a>的tracked分支更新到最新。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/indigo</span><br><span class="line">$ git remote add upstream https://github.com/yscoder/hexo-theme-indigo.git</span><br><span class="line">$ git fetch upstream card</span><br><span class="line">$ git checkout -t origin/card</span><br><span class="line"><span class="comment"># Use "git merge upstream/card" if do not want to rewrite the history of card</span></span><br><span class="line">$ git rebase upstream/card</span><br><span class="line">$ git push origin card</span><br></pre></td></tr></table></figure><h3 id="Merge-dev-branch"><a href="#Merge-dev-branch" class="headerlink" title="Merge dev branch"></a>Merge dev branch</h3><p>同步完tracked分支后，将tracked分支的改动merge到自己的开发分支上，可以使用git merge/rebase/cherry-pick等方法，一般使用git rebase。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout card-triplekiller</span><br><span class="line">$ git rebase card</span><br><span class="line"><span class="comment"># Resolve conflicts and then run "git rebase --continue"</span></span><br><span class="line">$ git push origin card</span><br><span class="line">$ <span class="built_in">cd</span> ../../</span><br><span class="line"><span class="comment">### Bump up submodule revision</span></span><br><span class="line">$ git add themes/indigo</span><br><span class="line">$ git commit -s -m <span class="string">"indigo: Merge upstream commits"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h3 id="Git-repos-for-Hexo-blog"><a href="#Git-repos-for-Hexo-blog" class="headerlink" title="Git repos for Hexo blog"></a>Git repos for Hexo blog</h3><table><thead><tr><th>Repo</th><th>URL</th></tr></thead><tbody><tr><td>hexo source</td><td><a href="https://github.com/triplekiller/hexo-blog.git" target="_blank" rel="noopener">https://github.com/triplekiller/hexo-blog.git</a></td></tr><tr><td>hexo site</td><td><a href="https://github.com/triplekiller/triplekiller.github.io.git" target="_blank" rel="noopener">https://github.com/triplekiller/triplekiller.github.io.git</a></td></tr><tr><td>hexo theme</td><td><a href="https://github.com/triplekiller/hexo-theme-indigo.git" target="_blank" rel="noopener">https://github.com/triplekiller/hexo-theme-indigo.git</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;热门的Hexo主题一般更新很快，我们可以定期将自己感兴趣的或者影响较大的patch合入到自己的主题仓库中，具体步骤如下：&lt;/p&gt;
&lt;h3 id=&quot;Sync-a-fork&quot;&gt;&lt;a href=&quot;#Sync-a-fork&quot; class=&quot;headerlink&quot; title=&quot;Sy
      
    
    </summary>
    
      <category term="Network" scheme="http://bit2tib.com/categories/Network/"/>
    
    
      <category term="hexo" scheme="http://bit2tib.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Start Writing Hexo Blog</title>
    <link href="http://bit2tib.com/2018/01/23/start-writing-hexo-blog/"/>
    <id>http://bit2tib.com/2018/01/23/start-writing-hexo-blog/</id>
    <published>2018-01-23T07:04:19.000Z</published>
    <updated>2018-01-25T01:13:27.992Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo博客已经搭建完毕，但有时需要在不同的电脑上写博客，需要重新安装Hexo博客环境，具体步骤如下：</p><h3 id="Clone博客源码"><a href="#Clone博客源码" class="headerlink" title="Clone博客源码"></a>Clone博客源码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/triplekiller/hexo-blog.git</span><br><span class="line">$ <span class="built_in">cd</span> hexo-blog</span><br><span class="line">$ git submodule update --init</span><br><span class="line">$ git config user.name <span class="string">"Ethan Xia"</span></span><br><span class="line">$ git config user.email <span class="string">"sanhust@gmail.com"</span></span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>根据<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a>，安装Hexo及其依赖的Node.js等环境。</p><ul><li>安装hexo-cli，安装路径在/usr/lib/node_modules/hexo-cli/中</li></ul><p><code>$ npm install -g hexo-cli</code></p><ul><li>安装hexo及package.json中指定的依赖包，安装路径在node_modules目录中</li></ul><p><code>$ npm install --save</code></p><ul><li>安装hexo-server（Hexo 3.0后hexo-server需要单独安装）</li></ul><p><code>$ npm install hexo-server --save</code></p><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>生成静态文件，路径在public目录中</p><p><code>$ hexo g</code></p><p>启动服务器，默认访问地址为：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p><code>$ hexo s</code></p><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p><code>$ hexo new post start-writing-hexo-blog</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo博客已经搭建完毕，但有时需要在不同的电脑上写博客，需要重新安装Hexo博客环境，具体步骤如下：&lt;/p&gt;
&lt;h3 id=&quot;Clone博客源码&quot;&gt;&lt;a href=&quot;#Clone博客源码&quot; class=&quot;headerlink&quot; title=&quot;Clone博客源码&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Network" scheme="http://bit2tib.com/categories/Network/"/>
    
    
      <category term="hexo" scheme="http://bit2tib.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux Zombie</title>
    <link href="http://bit2tib.com/2017/04/16/linux-zombie/"/>
    <id>http://bit2tib.com/2017/04/16/linux-zombie/</id>
    <published>2017-04-16T14:34:59.000Z</published>
    <updated>2018-01-25T01:13:27.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="僵尸进程：defunt-zombie"><a href="#僵尸进程：defunt-zombie" class="headerlink" title="僵尸进程：defunt/zombie"></a>僵尸进程：defunt/zombie</h3><ul><li>一个已经终止但是其父进程尚未对其进行善后处理（获取终止子进程的有关信息，释放它仍占用的资源）的进程。子进程死后会发送SIGCHLD信号给父进程，父进程收到此信号后，执行waitpid()函数为子进程收尸</li><li>在fork/execve过程中，假设子进程结束时父进程仍存在，而父进程fork之前既没安装SIGCHLD信号处理函数调用waitpid()等待子进程结束，又没有显式忽略该信号，则子进程成为僵尸进程，无法正常结束，此时即使是root身份kill -9也不能杀死僵尸进程。补救办法是杀死僵尸进程的父进程（僵尸进程的父进程必然存在），僵尸进程成为”孤儿进程”，过继给1号进程init，init始终会负责清理僵尸进程</li><li>系统调用exit，它的作用是使进程退出，但也仅仅限于将一个正常的进程变成一个僵尸进程，并不能将其完全销毁。一个进程在调用exit命令结束自己的生命的时候，其实它并没有真正的被销毁，而是留下一个称为僵尸进程（Zombie）的数据结构</li><li>僵尸进程已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集</li></ul><h3 id="避免僵尸进程"><a href="#避免僵尸进程" class="headerlink" title="避免僵尸进程"></a>避免僵尸进程</h3><ul><li>调用signal函数忽略SIGCHLD软中断，即signal(SIGCHLD, SIG_IGN)</li><li>调用wait/waitpid接管SIGCHLD信号，等待子进程返回，即while(pid != waitpid(pid, NULL,WNOHANG))</li><li>fork两次，子进程先退出，孙子进程就被init接管了，实际上与最初的父进程脱离了关系，就不会僵死了</li></ul><h3 id="僵尸进程危害"><a href="#僵尸进程危害" class="headerlink" title="僵尸进程危害"></a>僵尸进程危害</h3><ul><li>Linux有最大进程数量限制，可用”ulimit -u”查看最大用户进程数，默认为32768(cat /proc/sys/kernel/pid_max)</li><li>产生过多的zombie进程会导致新进程无法生存</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;僵尸进程：defunt-zombie&quot;&gt;&lt;a href=&quot;#僵尸进程：defunt-zombie&quot; class=&quot;headerlink&quot; title=&quot;僵尸进程：defunt/zombie&quot;&gt;&lt;/a&gt;僵尸进程：defunt/zombie&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://bit2tib.com/categories/Linux/"/>
    
    
      <category term="process" scheme="http://bit2tib.com/tags/process/"/>
    
  </entry>
  
</feed>
