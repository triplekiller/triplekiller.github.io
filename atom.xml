<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EthanX&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bit2tib.com/"/>
  <updated>2018-06-25T06:56:25.183Z</updated>
  <id>http://bit2tib.com/</id>
  
  <author>
    <name>Ethan X</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Setup HLS Server Using Nginx</title>
    <link href="http://bit2tib.com/2018/03/02/setup-hls-server-using-nginx/"/>
    <id>http://bit2tib.com/2018/03/02/setup-hls-server-using-nginx/</id>
    <published>2018-03-02T06:00:57.000Z</published>
    <updated>2018-06-25T06:56:25.183Z</updated>
    
    <content type="html"><![CDATA[<p>为了学习HLS，首先在Ubuntu 14.04 x86_64平台上用Nginx搭一个HLS Streaming Server玩一玩，具体步骤如下：</p><h3 id="Install-Nginx-with-RTMP-support"><a href="#Install-Nginx-with-RTMP-support" class="headerlink" title="Install Nginx with RTMP support"></a>Install Nginx with RTMP support</h3><ul><li>下载Nginx及nginx-rtmp-module</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir ~/hls</span><br><span class="line">$ <span class="built_in">cd</span> ~/hls</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/arut/nginx-rtmp-module</span><br><span class="line"><span class="comment"># Download related version of nginx</span></span><br><span class="line">$ wget http://nginx.org/download/nginx-1.12.2.tar.gz</span><br></pre></td></tr></table></figure><ul><li>编译安装Nginx</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install nginx dependencies</span></span><br><span class="line">$ sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev</span><br><span class="line">$ tar xf nginx-1.12.2.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.12.2</span><br><span class="line">$ ./configure --with-http_ssl_module --with-http_stub_status_module \</span><br><span class="line">--add-module=../nginx-rtmp-module</span><br><span class="line">$ make -j4</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><ul><li>安装Nginx init脚本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/JasonGiedymin/nginx-init-ubuntu.git</span><br><span class="line">$ sudo cp nginx-init-ubuntu/nginx /etc/init.d/nginx</span><br><span class="line">$ sudo chmod +x /etc/init.d/nginx</span><br><span class="line">$ sudo update-rc.d nginx defaults</span><br><span class="line">$ sudo service nginx start</span><br></pre></td></tr></table></figure><h3 id="Config-Nginx-with-RTMP"><a href="#Config-Nginx-with-RTMP" class="headerlink" title="Config Nginx with RTMP"></a>Config Nginx with RTMP</h3><p>根据<a href="https://github.com/arut/nginx-rtmp-module/wiki/Getting-started-with-nginx-rtmp" target="_blank" rel="noopener">nginx-rtmp-module的Wiki</a>配置RTMP，修改nginx.conf如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--- /usr/local/nginx/conf/nginx.conf.default2018-03-01 10:38:34.726129303 +0800</span><br><span class="line">+++ /usr/local/nginx/conf/nginx.conf2018-03-05 12:20:56.532758031 +0800</span><br><span class="line">@@ -1,6 +1,6 @@</span><br><span class="line"></span><br><span class="line"> #user  nobody;</span><br><span class="line">-worker_processes  1;</span><br><span class="line">+worker_processes  auto;</span><br><span class="line"></span><br><span class="line"> #error_log  logs/error.log;</span><br><span class="line"> #error_log  logs/error.log  notice;</span><br><span class="line">@@ -92,6 +92,39 @@</span><br><span class="line">     #    &#125;</span><br><span class="line">     #&#125;</span><br><span class="line"></span><br><span class="line">+    server &#123;</span><br><span class="line">+        listen 8000;</span><br><span class="line">+        server_name localhost;</span><br><span class="line">+</span><br><span class="line">+        # rtmp stat</span><br><span class="line">+        location /stat &#123;</span><br><span class="line">+            rtmp_stat all;</span><br><span class="line">+            rtmp_stat_stylesheet stat.xsl;</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        location /stat.xsl &#123;</span><br><span class="line">+            # you can move stat.xsl to a different location</span><br><span class="line">+            root /tmp/hls;</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        # rtmp control</span><br><span class="line">+        location /control &#123;</span><br><span class="line">+            rtmp_control all;</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        location /hls &#123;</span><br><span class="line">+            types &#123;</span><br><span class="line">+                text/html html htm;</span><br><span class="line">+                application/dash+xml mpd;</span><br><span class="line">+                application/x-mpegurl m3u8;</span><br><span class="line">+                video/mp2t ts;</span><br><span class="line">+            &#125;</span><br><span class="line">+</span><br><span class="line">+            root /tmp;</span><br><span class="line">+            index index.html;</span><br><span class="line">+            expires -1;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line"></span><br><span class="line">     # HTTPS server</span><br><span class="line">     #</span><br><span class="line">@@ -115,3 +148,21 @@</span><br><span class="line">     #&#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">+</span><br><span class="line">+rtmp &#123;</span><br><span class="line">+    server &#123;</span><br><span class="line">+            listen 1935;</span><br><span class="line">+            chunk_size 4096;</span><br><span class="line">+</span><br><span class="line">+            application hls &#123;</span><br><span class="line">+                live on;</span><br><span class="line">+                # Turn on HLS</span><br><span class="line">+                hls on;</span><br><span class="line">+                hls_path /tmp/hls;</span><br><span class="line">+                hls_fragment 5;</span><br><span class="line">+                # hls_playlist_length 60;</span><br><span class="line">+                # Disable consuming the stream from nginx as rtmp</span><br><span class="line">+                # deny play all;</span><br><span class="line">+            &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br></pre></td></tr></table></figure><p>写到这里，插一个题外话，vim打开nginx.conf，需要拷贝nginx.conf.diff的内容到Markdown编辑器atom，这里就涉及到vim如何与系统剪贴板交互，搜索一番后结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Check if vim installed supports system clipboard</span></span><br><span class="line">$ vim --version | grep clipboard</span><br><span class="line"><span class="comment"># If displayed as "-clipboard" then install vim-gtk</span></span><br><span class="line">$ sudo apt-get install vim-gtk</span><br><span class="line"><span class="comment"># "+y for yank to the clipboard register</span></span><br><span class="line"><span class="comment"># "+p for paste from the clipboard register</span></span><br><span class="line"><span class="comment"># :help clipboard for more information</span></span><br></pre></td></tr></table></figure><p>修改完成后，执行命令<code>sudo service nginx reload</code>重新加载nginx.conf文件。</p><h3 id="Push-live-stream-to-Nginx"><a href="#Push-live-stream-to-Nginx" class="headerlink" title="Push live stream to Nginx"></a>Push live stream to Nginx</h3><p>Nginx将RTMP stream作为输入，对于HLS来说，video stream格式一般是x264，audio stream格式一般是AAC。RTMP stream通过ffmpeg来提供。</p><ul><li>安装ffmpeg</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Reinstall ffmpeg from another PPA</span><br><span class="line">$ sudo apt-get --purge remove ffmpeg</span><br><span class="line">$ sudo apt-get --purge autoremove</span><br><span class="line">$ sudo apt-get install ppa-purge</span><br><span class="line">$ sudo ppa-purge ppa:kirillshkrogalev/ffmpeg-next</span><br><span class="line"></span><br><span class="line"># -E enable root using common user&apos;s env setting</span><br><span class="line">$ sudo -E add-apt-repository ppa:mc3man/trusty-media</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get dist-upgrade</span><br><span class="line">$ sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure><ul><li>ffmpeg提供RTMP stream</li></ul><p><code>$ ffmpeg -re -i big_buck_bunny_720p_h264.mov -c copy -f flv rtmp://localhost/hls/bbb</code></p><p>RTMP的URI格式为：<code>rtmp://nginx_host:[:nginx_port]/app_name/stream_name</code>，按照nginx.conf的配置，这里可以通过vlc(vlc –no-overlay –no-video-on-top)或ffplay来播放测试的HLS stream，URI可以是RTMP或者HTTP格式：</p><p><code>rtmp://localhost/hls/bbb</code></p><p><code>http://localhost:8000/hls/bbb.m3u8</code></p><p>另外，通过<code>http://localhost:8000/stat</code>可以查看RTMP stream的相关信息，需要拷贝nginx-rtmp-module目录下的stat.xsl到/tmp/hls目录下。</p><h3 id="Reference-links"><a href="#Reference-links" class="headerlink" title="Reference links"></a>Reference links</h3><ul><li><a href="https://docs.peer5.com/guides/setting-up-hls-live-streaming-server-using-nginx/" target="_blank" rel="noopener">Peer5 docs</a></li><li><a href="https://www.vultr.com/docs/setup-nginx-on-ubuntu-to-stream-live-hls-video" target="_blank" rel="noopener">Vultr docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了学习HLS，首先在Ubuntu 14.04 x86_64平台上用Nginx搭一个HLS Streaming Server玩一玩，具体步骤如下：&lt;/p&gt;
&lt;h3 id=&quot;Install-Nginx-with-RTMP-support&quot;&gt;&lt;a href=&quot;#Install-
      
    
    </summary>
    
      <category term="Multimedia" scheme="http://bit2tib.com/categories/Multimedia/"/>
    
    
      <category term="HLS" scheme="http://bit2tib.com/tags/HLS/"/>
    
      <category term="nginx" scheme="http://bit2tib.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Update Hexo Theme</title>
    <link href="http://bit2tib.com/2018/01/24/update-hexo-theme/"/>
    <id>http://bit2tib.com/2018/01/24/update-hexo-theme/</id>
    <published>2018-01-24T07:26:59.000Z</published>
    <updated>2018-06-25T06:56:25.183Z</updated>
    
    <content type="html"><![CDATA[<p>热门的Hexo主题一般更新很快，我们可以定期将自己感兴趣的或者影响较大的patch合入到自己的主题仓库中，具体步骤如下：</p><h3 id="Sync-a-fork"><a href="#Sync-a-fork" class="headerlink" title="Sync a fork"></a>Sync a fork</h3><p>按照<a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="noopener">GitHub帮助文档</a>，将自己的<a href="https://github.com/triplekiller/hexo-theme-indigo.git" target="_blank" rel="noopener">Hexo主题仓库</a>的tracked分支更新到最新。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/indigo</span><br><span class="line">$ git remote add upstream https://github.com/yscoder/hexo-theme-indigo.git</span><br><span class="line">$ git fetch upstream card</span><br><span class="line">$ git checkout -t origin/card</span><br><span class="line"><span class="comment"># Use "git merge upstream/card" if do not want to rewrite the history of card</span></span><br><span class="line">$ git rebase upstream/card</span><br><span class="line">$ git push origin card</span><br></pre></td></tr></table></figure><h3 id="Merge-dev-branch"><a href="#Merge-dev-branch" class="headerlink" title="Merge dev branch"></a>Merge dev branch</h3><p>同步完tracked分支后，将tracked分支的改动merge到自己的开发分支上，可以使用git merge/rebase/cherry-pick等方法，一般使用git rebase。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout card-triplekiller</span><br><span class="line">$ git rebase card</span><br><span class="line"><span class="comment"># Resolve conflicts and then run "git rebase --continue"</span></span><br><span class="line">$ git push origin card-triplekiller</span><br><span class="line">$ <span class="built_in">cd</span> ../../</span><br><span class="line"><span class="comment"># Bump up submodule revision</span></span><br><span class="line">$ git add themes/indigo</span><br><span class="line">$ git commit -s -m <span class="string">"indigo: Merge upstream commits"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h3 id="Git-repos-for-Hexo-blog"><a href="#Git-repos-for-Hexo-blog" class="headerlink" title="Git repos for Hexo blog"></a>Git repos for Hexo blog</h3><table><thead><tr><th>Repo</th><th>URL</th></tr></thead><tbody><tr><td>hexo source</td><td><a href="https://github.com/triplekiller/hexo-blog.git" target="_blank" rel="noopener">https://github.com/triplekiller/hexo-blog.git</a></td></tr><tr><td>hexo site</td><td><a href="https://github.com/triplekiller/triplekiller.github.io.git" target="_blank" rel="noopener">https://github.com/triplekiller/triplekiller.github.io.git</a></td></tr><tr><td>hexo theme</td><td><a href="https://github.com/triplekiller/hexo-theme-indigo.git" target="_blank" rel="noopener">https://github.com/triplekiller/hexo-theme-indigo.git</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;热门的Hexo主题一般更新很快，我们可以定期将自己感兴趣的或者影响较大的patch合入到自己的主题仓库中，具体步骤如下：&lt;/p&gt;
&lt;h3 id=&quot;Sync-a-fork&quot;&gt;&lt;a href=&quot;#Sync-a-fork&quot; class=&quot;headerlink&quot; title=&quot;Sy
      
    
    </summary>
    
      <category term="Network" scheme="http://bit2tib.com/categories/Network/"/>
    
    
      <category term="hexo" scheme="http://bit2tib.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Start Writing Hexo Blog</title>
    <link href="http://bit2tib.com/2018/01/23/start-writing-hexo-blog/"/>
    <id>http://bit2tib.com/2018/01/23/start-writing-hexo-blog/</id>
    <published>2018-01-23T07:04:19.000Z</published>
    <updated>2018-06-25T06:56:25.183Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo博客已经搭建完毕，但有时需要在不同的电脑上写博客，需要重新安装Hexo博客环境，具体步骤如下：</p><h2 id="Clone博客源码"><a href="#Clone博客源码" class="headerlink" title="Clone博客源码"></a>Clone博客源码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/triplekiller/hexo-blog.git</span><br><span class="line">$ <span class="built_in">cd</span> hexo-blog</span><br><span class="line">$ git submodule update --init</span><br><span class="line">$ git config user.name <span class="string">"Ethan Xia"</span></span><br><span class="line">$ git config user.email <span class="string">"sanhust@gmail.com"</span></span><br></pre></td></tr></table></figure><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>由于Ubuntu 16.04自带的nodejs版本太低(v4.6.2)，不推荐直接使用<code>sudo apt-get install -y nodejs</code>安装默认版本。可以使用以下两种方式进行安装。</p><h3 id="使用nvm安装"><a href="#使用nvm安装" class="headerlink" title="使用nvm安装"></a>使用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>安装</h3><p>下载nvm到<code>~/.nvm</code></p><p><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p><p>添加环境变量到<code>~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br><span class="line">[[ -r <span class="variable">$NVM_DIR</span>/bash_completion ]] &amp;&amp; \. <span class="variable">$NVM_DIR</span>/bash_completion</span><br></pre></td></tr></table></figure><p>下载最新的release版本</p><p><code>$ nvm install node</code></p><p>添加npm bash completion功能</p><p><code>$ npm i -g npm-completion</code></p><p>查看npm配置属性</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm config get globalconfig</span><br><span class="line">$ npm config get userconfig</span><br><span class="line">$ npm config ls -l</span><br></pre></td></tr></table></figure><h3 id="使用NodeSource的PPA源安装"><a href="#使用NodeSource的PPA源安装" class="headerlink" title="使用NodeSource的PPA源安装"></a>使用NodeSource的PPA源<a href="https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions" target="_blank" rel="noopener">安装</a></h3><p>安装Node.js 10.x版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>根据<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a>，安装Hexo</p><ul><li>安装hexo-cli，Ubuntu下全局路径在/usr/local/lib/node_modules/hexo-cli/中</li></ul><p><code>$ npm install -g hexo-cli</code></p><ul><li>安装hexo及package.json中指定的依赖包，安装路径在node_modules目录中</li></ul><p><code>$ npm install --save</code></p><ul><li>安装hexo-server（Hexo 3.0后hexo-server需要单独安装）</li></ul><p><code>$ npm install hexo-server --save</code></p><h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p>生成静态文件，路径在public目录中</p><p><code>$ hexo g</code></p><p>启动服务器，默认访问地址为<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p><code>$ hexo s</code></p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p><code>$ hexo new post start-writing-hexo-blog</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo博客已经搭建完毕，但有时需要在不同的电脑上写博客，需要重新安装Hexo博客环境，具体步骤如下：&lt;/p&gt;
&lt;h2 id=&quot;Clone博客源码&quot;&gt;&lt;a href=&quot;#Clone博客源码&quot; class=&quot;headerlink&quot; title=&quot;Clone博客源码&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Network" scheme="http://bit2tib.com/categories/Network/"/>
    
    
      <category term="hexo" scheme="http://bit2tib.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Linux Zombie</title>
    <link href="http://bit2tib.com/2017/04/16/linux-zombie/"/>
    <id>http://bit2tib.com/2017/04/16/linux-zombie/</id>
    <published>2017-04-16T14:34:59.000Z</published>
    <updated>2018-06-25T06:56:25.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="僵尸进程：defunt-zombie"><a href="#僵尸进程：defunt-zombie" class="headerlink" title="僵尸进程：defunt/zombie"></a>僵尸进程：defunt/zombie</h3><ul><li>一个已经终止但是其父进程尚未对其进行善后处理（获取终止子进程的有关信息，释放它仍占用的资源）的进程。子进程死后会发送SIGCHLD信号给父进程，父进程收到此信号后，执行waitpid()函数为子进程收尸</li><li>在fork/execve过程中，假设子进程结束时父进程仍存在，而父进程fork之前既没安装SIGCHLD信号处理函数调用waitpid()等待子进程结束，又没有显式忽略该信号，则子进程成为僵尸进程，无法正常结束，此时即使是root身份kill -9也不能杀死僵尸进程。补救办法是杀死僵尸进程的父进程（僵尸进程的父进程必然存在），僵尸进程成为”孤儿进程”，过继给1号进程init，init始终会负责清理僵尸进程</li><li>系统调用exit，它的作用是使进程退出，但也仅仅限于将一个正常的进程变成一个僵尸进程，并不能将其完全销毁。一个进程在调用exit命令结束自己的生命的时候，其实它并没有真正的被销毁，而是留下一个称为僵尸进程（Zombie）的数据结构</li><li>僵尸进程已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集</li></ul><h3 id="避免僵尸进程"><a href="#避免僵尸进程" class="headerlink" title="避免僵尸进程"></a>避免僵尸进程</h3><ul><li>调用signal函数忽略SIGCHLD软中断，即signal(SIGCHLD, SIG_IGN)</li><li>调用wait/waitpid接管SIGCHLD信号，等待子进程返回，即while(pid != waitpid(pid, NULL,WNOHANG))</li><li>fork两次，子进程先退出，孙子进程就被init接管了，实际上与最初的父进程脱离了关系，就不会僵死了</li></ul><h3 id="僵尸进程危害"><a href="#僵尸进程危害" class="headerlink" title="僵尸进程危害"></a>僵尸进程危害</h3><ul><li>Linux有最大进程数量限制，可用”ulimit -u”查看最大用户进程数，默认为32768(cat /proc/sys/kernel/pid_max)</li><li>产生过多的zombie进程会导致新进程无法生存</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;僵尸进程：defunt-zombie&quot;&gt;&lt;a href=&quot;#僵尸进程：defunt-zombie&quot; class=&quot;headerlink&quot; title=&quot;僵尸进程：defunt/zombie&quot;&gt;&lt;/a&gt;僵尸进程：defunt/zombie&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://bit2tib.com/categories/Linux/"/>
    
    
      <category term="process" scheme="http://bit2tib.com/tags/process/"/>
    
  </entry>
  
</feed>
