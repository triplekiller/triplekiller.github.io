{"meta":{"title":"EthanX's Blog","subtitle":"","description":"Keep thinking and keep moving","author":"Ethan X","url":"http://bit2tib.com"},"pages":[{"title":"About Me","date":"2017-04-10T14:50:38.000Z","updated":"2018-06-25T06:29:47.555Z","comments":false,"path":"about/index.html","permalink":"http://bit2tib.com/about/index.html","excerpt":"","text":"bit2tib It’s a palindrome word invented by me. bit is just the bit in computer technology. 2 has the same pronunciation with the word “to”. tib is the abbreviation of tebibyte. self-discovery If money were on object, what would you devote yourself into? Polymath or expert? How to stay focused and keep shipping? How to conquer ADHD? How to keep balance between BFS and DFS in thinking?"},{"title":"categories","date":"2017-04-04T06:36:22.000Z","updated":"2018-06-25T06:29:47.555Z","comments":false,"path":"categories/index.html","permalink":"http://bit2tib.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-04-04T06:34:57.000Z","updated":"2018-06-25T06:29:47.555Z","comments":false,"path":"tags/index.html","permalink":"http://bit2tib.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Setup HLS Server Using Nginx","slug":"setup-hls-server-using-nginx","date":"2018-03-02T06:00:57.000Z","updated":"2018-06-25T06:29:47.555Z","comments":true,"path":"2018/03/02/setup-hls-server-using-nginx/","link":"","permalink":"http://bit2tib.com/2018/03/02/setup-hls-server-using-nginx/","excerpt":"","text":"为了学习HLS，首先在Ubuntu 14.04 x86_64平台上用Nginx搭一个HLS Streaming Server玩一玩，具体步骤如下： Install Nginx with RTMP support 下载Nginx及nginx-rtmp-module $ mkdir ~/hls$ cd ~/hls$ git clone https://github.com/arut/nginx-rtmp-module# Download related version of nginx$ wget http://nginx.org/download/nginx-1.12.2.tar.gz 编译安装Nginx # Install nginx dependencies$ sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev$ tar xf nginx-1.12.2.tar.gz$ cd nginx-1.12.2$ ./configure --with-http_ssl_module --with-http_stub_status_module \\--add-module=../nginx-rtmp-module$ make -j4$ sudo make install 安装Nginx init脚本 $ git clone https://github.com/JasonGiedymin/nginx-init-ubuntu.git$ sudo cp nginx-init-ubuntu/nginx /etc/init.d/nginx$ sudo chmod +x /etc/init.d/nginx$ sudo update-rc.d nginx defaults$ sudo service nginx start Config Nginx with RTMP根据nginx-rtmp-module的Wiki配置RTMP，修改nginx.conf如下： --- /usr/local/nginx/conf/nginx.conf.default 2018-03-01 10:38:34.726129303 +0800+++ /usr/local/nginx/conf/nginx.conf 2018-03-05 12:20:56.532758031 +0800@@ -1,6 +1,6 @@ #user nobody;-worker_processes 1;+worker_processes auto; #error_log logs/error.log; #error_log logs/error.log notice;@@ -92,6 +92,39 @@ # &#125; #&#125;+ server &#123;+ listen 8000;+ server_name localhost;++ # rtmp stat+ location /stat &#123;+ rtmp_stat all;+ rtmp_stat_stylesheet stat.xsl;+ &#125;++ location /stat.xsl &#123;+ # you can move stat.xsl to a different location+ root /tmp/hls;+ &#125;++ # rtmp control+ location /control &#123;+ rtmp_control all;+ &#125;++ location /hls &#123;+ types &#123;+ text/html html htm;+ application/dash+xml mpd;+ application/x-mpegurl m3u8;+ video/mp2t ts;+ &#125;++ root /tmp;+ index index.html;+ expires -1;+ &#125;+ &#125; # HTTPS server #@@ -115,3 +148,21 @@ #&#125; &#125;++rtmp &#123;+ server &#123;+ listen 1935;+ chunk_size 4096;++ application hls &#123;+ live on;+ # Turn on HLS+ hls on;+ hls_path /tmp/hls;+ hls_fragment 5;+ # hls_playlist_length 60;+ # Disable consuming the stream from nginx as rtmp+ # deny play all;+ &#125;+ &#125;+&#125; 写到这里，插一个题外话，vim打开nginx.conf，需要拷贝nginx.conf.diff的内容到Markdown编辑器atom，这里就涉及到vim如何与系统剪贴板交互，搜索一番后结果如下： # Check if vim installed supports system clipboard$ vim --version | grep clipboard# If displayed as \"-clipboard\" then install vim-gtk$ sudo apt-get install vim-gtk# \"+y for yank to the clipboard register# \"+p for paste from the clipboard register# :help clipboard for more information 修改完成后，执行命令sudo service nginx reload重新加载nginx.conf文件。 Push live stream to NginxNginx将RTMP stream作为输入，对于HLS来说，video stream格式一般是x264，audio stream格式一般是AAC。RTMP stream通过ffmpeg来提供。 安装ffmpeg # Reinstall ffmpeg from another PPA$ sudo apt-get --purge remove ffmpeg$ sudo apt-get --purge autoremove$ sudo apt-get install ppa-purge$ sudo ppa-purge ppa:kirillshkrogalev/ffmpeg-next# -E enable root using common user&apos;s env setting$ sudo -E add-apt-repository ppa:mc3man/trusty-media$ sudo apt-get update$ sudo apt-get dist-upgrade$ sudo apt-get install ffmpeg ffmpeg提供RTMP stream $ ffmpeg -re -i big_buck_bunny_720p_h264.mov -c copy -f flv rtmp://localhost/hls/bbb RTMP的URI格式为：rtmp://nginx_host:[:nginx_port]/app_name/stream_name，按照nginx.conf的配置，这里可以通过vlc(vlc –no-overlay –no-video-on-top)或ffplay来播放测试的HLS stream，URI可以是RTMP或者HTTP格式： rtmp://localhost/hls/bbb http://localhost:8000/hls/bbb.m3u8 另外，通过http://localhost:8000/stat可以查看RTMP stream的相关信息，需要拷贝nginx-rtmp-module目录下的stat.xsl到/tmp/hls目录下。 Reference links Peer5 docs Vultr docs","categories":[{"name":"Multimedia","slug":"Multimedia","permalink":"http://bit2tib.com/categories/Multimedia/"}],"tags":[{"name":"HLS","slug":"HLS","permalink":"http://bit2tib.com/tags/HLS/"},{"name":"nginx","slug":"nginx","permalink":"http://bit2tib.com/tags/nginx/"}]},{"title":"Update Hexo Theme","slug":"update-hexo-theme","date":"2018-01-24T07:26:59.000Z","updated":"2018-06-25T06:29:47.555Z","comments":true,"path":"2018/01/24/update-hexo-theme/","link":"","permalink":"http://bit2tib.com/2018/01/24/update-hexo-theme/","excerpt":"","text":"热门的Hexo主题一般更新很快，我们可以定期将自己感兴趣的或者影响较大的patch合入到自己的主题仓库中，具体步骤如下： Sync a fork按照GitHub帮助文档，将自己的Hexo主题仓库的tracked分支更新到最新。 $ cd themes/indigo$ git remote add upstream https://github.com/yscoder/hexo-theme-indigo.git$ git fetch upstream card$ git checkout -t origin/card# Use \"git merge upstream/card\" if do not want to rewrite the history of card$ git rebase upstream/card$ git push origin card Merge dev branch同步完tracked分支后，将tracked分支的改动merge到自己的开发分支上，可以使用git merge/rebase/cherry-pick等方法，一般使用git rebase。 $ git checkout card-triplekiller$ git rebase card# Resolve conflicts and then run \"git rebase --continue\"$ git push origin card$ cd ../../### Bump up submodule revision$ git add themes/indigo$ git commit -s -m \"indigo: Merge upstream commits\"$ git push origin master Git repos for Hexo blog Repo URL hexo source https://github.com/triplekiller/hexo-blog.git hexo site https://github.com/triplekiller/triplekiller.github.io.git hexo theme https://github.com/triplekiller/hexo-theme-indigo.git","categories":[{"name":"Network","slug":"Network","permalink":"http://bit2tib.com/categories/Network/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://bit2tib.com/tags/hexo/"}]},{"title":"Start Writing Hexo Blog","slug":"start-writing-hexo-blog","date":"2018-01-23T07:04:19.000Z","updated":"2018-06-25T06:29:47.555Z","comments":true,"path":"2018/01/23/start-writing-hexo-blog/","link":"","permalink":"http://bit2tib.com/2018/01/23/start-writing-hexo-blog/","excerpt":"","text":"Hexo博客已经搭建完毕，但有时需要在不同的电脑上写博客，需要重新安装Hexo博客环境，具体步骤如下： Clone博客源码$ git clone https://github.com/triplekiller/hexo-blog.git$ cd hexo-blog$ git submodule update --init$ git config user.name \"Ethan Xia\"$ git config user.email \"sanhust@gmail.com\" 安装Node.js由于Ubuntu 16.04自带的nodejs版本太低(v4.6.2)，不推荐直接使用sudo apt-get install -y nodejs安装默认版本。可以使用以下两种方式进行安装。 使用nvm安装下载nvm到~/.nvm $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 添加环境变量到~/.bashrc export NVM_DIR=\"$HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm[[ -r $NVM_DIR/bash_completion ]] &amp;&amp; \\. $NVM_DIR/bash_completion 下载最新的release版本 $ nvm install node 添加npm bash completion功能 $ npm i -g npm-completion 查看npm配置属性 $ npm config get globalconfig$ npm config get userconfig$ npm config ls -l 使用NodeSource的PPA源安装安装Node.js 10.x版本 curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -sudo apt-get install -y nodejs 安装Hexo根据Hexo官方文档，安装Hexo 安装hexo-cli，Ubuntu下全局路径在/usr/local/lib/node_modules/hexo-cli/中 $ npm install -g hexo-cli 安装hexo及package.json中指定的依赖包，安装路径在node_modules目录中 $ npm install --save 安装hexo-server（Hexo 3.0后hexo-server需要单独安装） $ npm install hexo-server --save 本地预览生成静态文件，路径在public目录中 $ hexo g 启动服务器，默认访问地址为http://localhost:4000/ $ hexo s 写博客$ hexo new post start-writing-hexo-blog","categories":[{"name":"Network","slug":"Network","permalink":"http://bit2tib.com/categories/Network/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://bit2tib.com/tags/hexo/"}]},{"title":"Linux Zombie","slug":"linux-zombie","date":"2017-04-16T14:34:59.000Z","updated":"2018-06-25T06:29:47.555Z","comments":true,"path":"2017/04/16/linux-zombie/","link":"","permalink":"http://bit2tib.com/2017/04/16/linux-zombie/","excerpt":"","text":"僵尸进程：defunt/zombie 一个已经终止但是其父进程尚未对其进行善后处理（获取终止子进程的有关信息，释放它仍占用的资源）的进程。子进程死后会发送SIGCHLD信号给父进程，父进程收到此信号后，执行waitpid()函数为子进程收尸 在fork/execve过程中，假设子进程结束时父进程仍存在，而父进程fork之前既没安装SIGCHLD信号处理函数调用waitpid()等待子进程结束，又没有显式忽略该信号，则子进程成为僵尸进程，无法正常结束，此时即使是root身份kill -9也不能杀死僵尸进程。补救办法是杀死僵尸进程的父进程（僵尸进程的父进程必然存在），僵尸进程成为”孤儿进程”，过继给1号进程init，init始终会负责清理僵尸进程 系统调用exit，它的作用是使进程退出，但也仅仅限于将一个正常的进程变成一个僵尸进程，并不能将其完全销毁。一个进程在调用exit命令结束自己的生命的时候，其实它并没有真正的被销毁，而是留下一个称为僵尸进程（Zombie）的数据结构 僵尸进程已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集 避免僵尸进程 调用signal函数忽略SIGCHLD软中断，即signal(SIGCHLD, SIG_IGN) 调用wait/waitpid接管SIGCHLD信号，等待子进程返回，即while(pid != waitpid(pid, NULL, WNOHANG)) fork两次，子进程先退出，孙子进程就被init接管了，实际上与最初的父进程脱离了关系，就不会僵死了 僵尸进程危害 Linux有最大进程数量限制，可用”ulimit -u”查看最大用户进程数，默认为32768(cat /proc/sys/kernel/pid_max) 产生过多的zombie进程会导致新进程无法生存","categories":[{"name":"Linux","slug":"Linux","permalink":"http://bit2tib.com/categories/Linux/"}],"tags":[{"name":"process","slug":"process","permalink":"http://bit2tib.com/tags/process/"}]}]}